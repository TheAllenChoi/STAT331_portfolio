---
title: "Lab 8"
author: "Allen Choi"
format:
  html:
    toc: true
    code-fold: true
    number-sections: true
    self-contained: true
editor: visual
theme: cerulean
execute:
  error: true
  echo: true
---

```{r setup packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)
```

```{r}
#| include: false
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

# Pluralizing Function
**1.**
```{r pluralize-function}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

gift <-
  case_when(
    str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
    str_detect(gift, "y") ~ str_replace(gift, "y", "ies"),
    TRUE ~ str_c(gift, "s", sep = "")
  )

return(gift)

}
```

# Phrase Function
**2.**
```{r phrase-function}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- 
  case_when(
    num_word != "one" ~ (item <- pluralize_gift(item)),
    TRUE ~ item
  )
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  num_word <- case_when(
    num_word == "one" ~ case_when(
      str_detect(item, "^aeiou") ~ str_c("an", item, sep = " "),
      TRUE ~ "a"),
    TRUE ~ num_word
      
  )
  


  ## Step 4: Glue all of the pieces together! 
  sentence <- glue::glue("{num_word} {adjective} {item} {verb} {location}")
  sentence <- str_squish(sentence)
  return(sentence)
}
```

# Calling Phrase function
**3.**
```{r phrase}
xmas2 <- xmas |> 
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )

```

# String for one day
**4.**
```{r}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_line <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- 
    english::ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas my true love gave to me:")
  # Step 2: Sing the gift phrases

  phrases <- dataset |>
    pull( {{phrase_col}} )
  phrases <- phrases[line:1]



  ## put it together
    phrases <- glue_collapse(phrases,
                 sep = ", \n",
                 last = ", and \n")
    space = " "
    fullphrase <- glue::glue("{intro} \n {phrases}")
    fullphrase <- str_c(fullphrase, ". \n")
    return(fullphrase)
}
```

# Tests
**5.**
```{r}
xmas2 |>
sing_line(line = 2, phrase_col = Full.Phrase)

map_chr(1:12, ~ sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```

# Entire Lyrics
**6.**
```{r}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )

map_chr(1:12, ~sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```
